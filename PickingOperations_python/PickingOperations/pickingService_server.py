# Copyright 2015 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""The Python implementation of the GRPC helloworld.Greeter server."""

from concurrent import futures
import logging
from Product import *

import grpc

import pickingService_pb2
import pickingService_pb2_grpc
import uuid


# This is generated by the tool
class Picking(pickingService_pb2_grpc.PickingServicer):

    def getBin(self, request, context):

        plists = []
        p1 = Product("SP7875", "TV", "T345", 50)
        p2 = Product("YE98767", "Bike", "T9876", 70)
        p3 = Product("TR87680", "Microwave", "T349", 50)
        p4 = Product("WE3456", "Iron", "T9875", 10)
        p5 = Product("XD7875", "Refrigerator", "T349", 70)
        p6 = Product("BH67655", "Monitor", "T5786", 80)
        plists.append(p1)
        plists.append(p2)
        plists.append(p3)
        plists.append(p4)
        plists.append(p5)
        plists.append(p6)

        for product in plists:
            if product.sku == request.sku:
                quantity = product.getQuantity() - 1
                product.setQuantity(quantity)
                bin = product.getBin()
                print(bin)
                break
            else:
                print("There is no product registerd with the sku")

        return pickingService_pb2.BinResponse(bin='Product name: %s' % request.productName + ' bin: ' + bin)

    def pickProduct(self, request, context):
        pickId = str(uuid.uuid4())
        # return pickingService_pb2.PickResponse(resultMessage='The product : '+request.productName+' quantity : '+int(request.quantity) + ' is successfully picked from bin ' + request.bin, pickId=' pick id : '+pickId)
        return pickingService_pb2.PickResponse(
            resultMessage='The product %s is successfully picked up and ready to ship. ' % request.productName + ' pickId :' + pickId)


# return pickingService_pb2.PickResponse(resultMessage='The products for the order picked up', pickId='2afasdf')


# It will create server // this is the typical that I see all the server
def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))  # get the referece to the server I add
    pickingService_pb2_grpc.add_PickingServicer_to_server(Picking(),
                                                          server)  # 여기 Greater() is the class that implement the service
    server.add_insecure_port(
        '[::]:1127')  # pass the insecure channel // actual connection to the airport that's localhost
    server.start()
    server.wait_for_termination()


if __name__ == '__main__':
    logging.basicConfig()
    serve()
